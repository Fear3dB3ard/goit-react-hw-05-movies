{"version":3,"file":"static/js/524.13a27164.chunk.js","mappings":"4LACA,QAA4B,wBAA5B,EAA+D,uBAA/D,EAAiG,uBAAjG,EAAqI,yBAArI,EAA0K,wBAA1K,EAA8M,wBAA9M,EAAsP,4B,aCkEtP,QAxDA,WACE,MAAM,QAAEA,IAAYC,EAAAA,EAAAA,MACbC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAejC,OAbAC,EAAAA,EAAAA,YAAU,KACiBC,WACvB,IACE,MAAMC,QAAaC,EAAAA,EAAAA,IAAgBR,GACnCG,EAAQI,EAAKL,KACf,CAAE,MAAOO,GACPC,QAAQD,MAAM,iCAAkCA,EAClD,GAGFE,EAAkB,GACjB,CAACX,KAGFY,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAiBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAgBC,SAC5Bb,EAAKe,KAAKC,IACTN,EAAAA,EAAAA,MAAA,MAAmBC,UAAWC,EAAgBC,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,OACEG,IACED,EAAME,aAAY,GAAAC,OA3BX,mCA4BcA,OAAGH,EAAME,cAC1B,6BAENE,IAAKJ,EAAMK,KACXV,UAAWC,KAEbF,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAiBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,KAAGH,UAAWC,EAAiBC,SAAEG,EAAMK,QACvCX,EAAAA,EAAAA,MAAA,KAAGC,UAAWC,EAAqBC,SAAA,CAAC,cACtBG,EAAMM,kBAbfN,EAAMO,UAqBzB,C,sECpDA,MAAMC,EAAU,mCACVC,EAAW,+BAEXC,EAAsBtB,UAC1B,MAAMuB,QAAiBC,MAAM,GAADT,OACvBM,EAAQ,gCAAAN,OAA+BK,IAE5C,IAAKG,EAASE,GAAI,MAAM,IAAIC,MAAM,mCAClC,OAAOH,EAASI,MAAM,EAGlBC,EAAe5B,UACnB,MAAMuB,QAAiBC,MAAM,GAADT,OACvBM,EAAQ,0BAAAN,OAAyBK,EAAO,WAAAL,OAAUc,IAEvD,IAAKN,EAASE,GAAI,MAAM,IAAIC,MAAM,2BAClC,OAAOH,EAASI,MAAM,EAGlBG,EAAkB9B,UACtB,MAAMuB,QAAiBC,MAAM,GAADT,OACvBM,EAAQ,WAAAN,OAAUrB,EAAO,aAAAqB,OAAYK,IAE1C,IAAKG,EAASE,GAAI,MAAM,IAAIC,MAAM,iCAClC,OAAOH,EAASI,MAAM,EAGlBzB,EAAkBF,UACtB,MAAMuB,QAAiBC,MAAM,GAADT,OACvBM,EAAQ,WAAAN,OAAUrB,EAAO,qBAAAqB,OAAoBK,IAElD,IAAKG,EAASE,GAAI,MAAM,IAAIC,MAAM,iCAClC,OAAOH,EAASI,MAAM,EAGlBI,EAAkB/B,UACtB,MAAMuB,QAAiBC,MAAM,GAADT,OACvBM,EAAQ,WAAAN,OAAUrB,EAAO,qBAAAqB,OAAoBK,IAElD,IAAKG,EAASE,GAAI,MAAM,IAAIC,MAAM,iCAClC,OAAOH,EAASI,MAAM,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Cast_container__iz+ye\",\"castList\":\"Cast_castList__ARoWn\",\"castItem\":\"Cast_castItem__-Jcfe\",\"actorImage\":\"Cast_actorImage__IECZO\",\"actorInfo\":\"Cast_actorInfo__8ZWx-\",\"actorName\":\"Cast_actorName__XabVA\",\"characterName\":\"Cast_characterName__R1bgC\"};","\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getMovieCredits } from '../../services/api';\nimport styles from './Cast.module.css';\n\n// URL de bazÄƒ pentru imagini\nconst BASE_IMAGE_URL = 'https://image.tmdb.org/t/p/w200';\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const loadMovieCredits = async () => {\n      try {\n        const data = await getMovieCredits(movieId);\n        setCast(data.cast);\n      } catch (error) {\n        console.error('Failed to fetch movie credits:', error);\n      }\n    };\n\n    loadMovieCredits();\n  }, [movieId]);\n\n  return (\n    <div className={styles.container}>\n      <h2>Cast</h2>\n      <ul className={styles.castList}>\n        {cast.map((actor) => (\n          <li key={actor.id} className={styles.castItem}>\n            <img\n              src={\n                actor.profile_path\n                  ? `${BASE_IMAGE_URL}${actor.profile_path}`\n                  : '/path/to/default/image.jpg'\n              }\n              alt={actor.name}\n              className={styles.actorImage}\n            />\n            <div className={styles.actorInfo}>\n              <p className={styles.actorName}>{actor.name}</p>\n              <p className={styles.characterName}>\n                Character: {actor.character}\n              </p>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n","\n\nconst API_KEY = '13b1039719f4562adeb2f96b830cbe1e';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst fetchTrendingMovies = async () => {\n  const response = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  if (!response.ok) throw new Error('Failed to fetch trending movies');\n  return response.json();\n};\n\nconst searchMovies = async (query) => {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  if (!response.ok) throw new Error('Failed to search movies');\n  return response.json();\n};\n\nconst getMovieDetails = async (movieId) => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  if (!response.ok) throw new Error('Failed to fetch movie details');\n  return response.json();\n};\n\nconst getMovieCredits = async (movieId) => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  if (!response.ok) throw new Error('Failed to fetch movie credits');\n  return response.json();\n};\n\nconst getMovieReviews = async (movieId) => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  if (!response.ok) throw new Error('Failed to fetch movie reviews');\n  return response.json();\n};\n\nexport {\n  fetchTrendingMovies,\n  searchMovies,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n"],"names":["movieId","useParams","cast","setCast","useState","useEffect","async","data","getMovieCredits","error","console","loadMovieCredits","_jsxs","className","styles","children","_jsx","map","actor","src","profile_path","concat","alt","name","character","id","API_KEY","BASE_URL","fetchTrendingMovies","response","fetch","ok","Error","json","searchMovies","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}